titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual", choices = unique(df$Employment)),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
## Carregando Pacotes
library(shiny)
library(randomForest)
# Carregando o modelo
modelo <- readRDS("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/modelo.rds")
print(modelo)
# Carregando o dataset antes da transformação (baixado do Azure ML)
df <- read.csv("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/dados.csv", stringsAsFactors = TRUE)
head(df)
# Ajustar níveis das variáveis categóricas
df$Duration_f <- as.factor(df$Duration_f)
df$CreditAmount_f <- as.factor(df$CreditAmount_f)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/20.Projetos_com_Feedback/1.Prevendo_Consumo_Energia_Carros_Eletricos")
getwd()
## Machine Learning em Logística Prevendo o Consumo de Energia de Carros Elétricos ##
## Carregando Pacotes
library(readxl)         # carregar arquivos
library(dplyr)          # manipulação de dados
library(ggplot2)        # gera gráficos
library(shiny)          # intercace gráfica
library(randomForest)   # carrega algoritimo de ML (randomForest)
library(rpart)          # carrega algoritimo de ML (árvore de decisão)
library(e1071)          # carrega algoritimo de ML (SVM)
library(caret)          # cria confusion matrix
library(h2o)            # framework para construir modelos de machine learning
# Inicializando o H2O (Framework de Machine Learning)
h2o.init()
modelo_carregado <- h2o.loadModel("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/20.Projetos_com_Feedback/1.Prevendo_Consumo_Energia_Carros_Eletricos/modelos/versao4_modelo/GBM_grid_1_AutoML_1_20240202_151050_model_382")
modelocarregado <- h2o.loadModel("modelos/versao4_modelo")
modelocarregado <- h2o.loadModel("modelos/versao4_modelo/")
modelocarregado <- h2o.loadModel("modelos/versao4_modelo")
modelocarregado <- h2o.loadModel("modelos/versao4_modelo/GBM_grid_1_AutoML_1_20240202_151050_model_382")
modelo_automl_versao4 <- h2o.loadModel("modelos/versao4_modelo/GBM_grid_1_AutoML_1_20240202_151050_model_382")
modelo2_automl_versao4 <- h2o.loadModel("modelos/versao4_modelo2/DeepLearning_grid_2_AutoML_2_20240202_153518_model_10")
# Avaliação dos Modelos
ava_modelo1 <- h2o.performance(modelo_automl_versao4)
ava_modelo1
ava_modelo2 <- h2o.performance(modelo2_automl_versao4)
ava_modelo2
## Desliga o H2O
h2o.shutdown()
dados <- data.frame(read_xlsx("dataset/FEV-data-Excel.xlsx"))
dados <- dados[complete.cases(dados), ]
# - Modifica todas as variáveis chr para factor
# - Modifica as variáveis numéricas Number.of.seats e Number.of.doors em factor
# - Cria duas novas variáveis de relação
# - Aplica Normalização nas variáveis do tipo int
# - Utiliza Feature Selection
# - Cria 1 Tipo de Modelo (RandomForest)
## Engenharia de Atributos
# Convertendo a variável variáveis chr para fator
dados <- dados %>%
mutate_if(is.character, factor) %>%
mutate(across(c(Number.of.seats, Number.of.doors), as.factor))
# Normalização dos Dados (variáveis numéricas) (Exemplo 1 coluna ao final)
numeric_columns <- sapply(dados, is.numeric)
dados_nor <- dados %>%
mutate(across(where(is.numeric), ~ scale(., center = min(.), scale = max(.) - min(.))))
rm(numeric_columns)
# Reverter Normalização
# dados_revertidos <- dados_nor %>%
#   mutate(across(where(is.numeric), ~ (. * (max(dados[, cur_column()]) - min(dados[, cur_column()])) + min(dados[, cur_column()]))))
# Criando novas variáveis de relação
dados_nor$Weight.Power.Ratio <- dados$Minimal.empty.weight..kg. / dados$Engine.power..KM.  # Relação entre Peso e Potência do Motor
dados_nor$Battery.Range.Ratio <- dados$Battery.capacity..kWh. / dados$Range..WLTP...km.    # Relação entre Capacidade da Bateria e Alcance
## Seleção de Variáveis (Feature Selection)
modelo <- randomForest(mean...Energy.consumption..kWh.100.km. ~ .,
data = dados_nor,
ntree = 100, nodesize = 10, importance = T, set.seed(100))
# Visualizando por números
print(modelo$importance)
# Visualizando por Gráficos
varImpPlot(modelo)
importancia_ordenada <- modelo$importance[order(-modelo$importance[, 1]), , drop = FALSE]
df_importancia <- data.frame(
Variavel = rownames(importancia_ordenada),
Importancia = importancia_ordenada[, 1]
)
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
rm(modelo)
rm(importancia_ordenada)
rm(df_importancia)
## Criando Modelo
# Dividindo os dados em treino e teste
set.seed(150)
indices <- createDataPartition(dados_nor$mean...Energy.consumption..kWh.100.km., p = 0.80, list = FALSE)
dados_treino <- dados_nor[indices, ]
dados_teste <- dados_nor[-indices, ]
rm(indices)
# Criando o modelo preditivo (RandomForest)
modelo <- randomForest(mean...Energy.consumption..kWh.100.km. ~ Wheelbase..cm. + Battery.Range.Ratio + Make + Minimal.price..gross...PLN.
+ Maximum.speed..kph. + Permissable.gross.weight..kg. + Width..cm. + Length..cm. + Drive.type + Maximum.torque..Nm.,
data = dados_treino,
ntree = 100, nodesize = 10, importance = TRUE, set.seed(100))
# Realizando previsões no conjunto de teste
previsoes <- predict(modelo, newdata = dados_teste)
# Avaliando o desempenho do modelo
rmse <- sqrt(mean((previsoes - dados_teste$mean...Energy.consumption..kWh.100.km.)^2))
cat("RMSE (Root Mean Squared Error):", rmse, "\n")
mae <- mean(abs(previsoes - dados_teste$mean...Energy.consumption..kWh.100.km.))
cat("MAE (Mean Absolute Error):", mae, "\n")
rsquared <- 1 - sum((previsoes - dados_teste$mean...Energy.consumption..kWh.100.km.)^2) / sum((dados_teste$mean...Energy.consumption..kWh.100.km. - mean(dados_teste$mean...Energy.consumption..kWh.100.km.))^2)
cat("R-squared:", rsquared, "\n")
# Modelo 1
# RMSE (Root Mean Squared Error): 0.04279581
# MAE (Mean Absolute Error)     : 0.04041983
# R-squared                     : 0.973763
rm(modelo)
rm(previsoes)
rm(rmse)
rm(mae)
rm(rsquared)
dados <- data.frame(read_xlsx("dataset/FEV-data-Excel.xlsx"))
dados <- dados[complete.cases(dados), ]
# - Aplica as modificações da versão 3
# - Utiliza as variáveis do Feature Selection
# - AutoML
## Engenharia de Atributos
# Convertendo a variável variáveis chr para fator
dados <- dados %>%
mutate_if(is.character, factor) %>%
mutate(across(c(Number.of.seats, Number.of.doors), as.factor))
# Normalização dos Dados (variáveis numéricas) (Exemplo 1 coluna ao final)
numeric_columns <- sapply(dados, is.numeric)
dados_nor <- dados %>%
mutate(across(where(is.numeric), ~ scale(., center = min(.), scale = max(.) - min(.))))
rm(numeric_columns)
# Reverter Normalização
# dados_revertidos <- dados_nor %>%
#   mutate(across(where(is.numeric), ~ (. * (max(dados[, cur_column()]) - min(dados[, cur_column()])) + min(dados[, cur_column()]))))
# Criando novas variáveis de relação
dados_nor$Weight.Power.Ratio <- dados$Minimal.empty.weight..kg. / dados$Engine.power..KM.  # Relação entre Peso e Potência do Motor
dados_nor$Battery.Range.Ratio <- dados$Battery.capacity..kWh. / dados$Range..WLTP...km.    # Relação entre Capacidade da Bateria e Alcance
dados_nor
dados_nor <- dados_nor %>%
select(-Car.full.name)
# Inicializando o H2O (Framework de Machine Learning)
h2o.init()
# O H2O requer que os dados estejam no formato de dataframe do H2O
h2o_frame <- as.h2o(dados_nor)
# O H2O requer que os dados estejam no formato de dataframe do H2O
h2o_frame <- as.h2o(dados_nor)
ava_modelo1
ava_modelo2
## Desliga o H2O
h2o.shutdown()
dados <- data.frame(read_xlsx("dataset/FEV-data-Excel.xlsx"))
dados <- dados[complete.cases(dados), ]
# - Modifica todas as variáveis chr para factor
# - Modifica as variáveis numéricas Number.of.seats e Number.of.doors em factor
# - Cria novas variáveis categóricas a partir de varíaveis do tipo int
# - Cria duas novas variáveis de relação
# - Utilizando AutoML
## Engenharia de Atributos
# Convertendo a variável variáveis chr para fator
dados <- dados %>%
mutate_if(is.character, factor) %>%
mutate(across(c(Number.of.seats, Number.of.doors), as.factor)) %>%
select(-Car.full.name)
# Cria novas variáveis categóricas a partir de varíaveis do tipo int
colunas_numericas <- sapply(dados, is.numeric)                          # Lista de colunas que são numéricas
# Função para criar variáveis fatoriais com 5 níveis
criar_variaveis_fatoriais <- function(coluna_numerica) {
# Calcula os limites dos intervalos
limite_inferior <- min(coluna_numerica)
limite_superior <- max(coluna_numerica)
# Calcula o tamanho do intervalo
tamanho_intervalo <- (limite_superior - limite_inferior) / 3
# Ajusta o limite inferior para evitar valores exatamente iguais
limite_inferior <- limite_inferior - 0.001
# Cria os rótulos dos níveis
rotulos <- paste0(round(seq(limite_inferior, limite_superior, by = tamanho_intervalo), 2),
" a ",
round(seq(limite_inferior + tamanho_intervalo, limite_superior + tamanho_intervalo, by = tamanho_intervalo), 2))
# Cria a variável fatorial com os rótulos, sem valores NA
variavel_fatorial <- cut(coluna_numerica, breaks = seq(limite_inferior, limite_superior + tamanho_intervalo, by = tamanho_intervalo), labels = rotulos, na.omit = FALSE)
return(variavel_fatorial)
}
# Aplica a função para criar variáveis fatoriais em cada coluna numérica
novas_variaveis_fatoriais <- lapply(dados[, colunas_numericas], criar_variaveis_fatoriais)
# Adiciona um sufixo aos nomes das novas variáveis
nomes_novas_variaveis <- paste0(names(dados[, colunas_numericas]), "_categoria")
names(novas_variaveis_fatoriais) <- nomes_novas_variaveis
# Combina as novas variáveis fatoriais ao conjunto de dados original
dados <- cbind(dados, novas_variaveis_fatoriais)
str(dados)
rm(criar_variaveis_fatoriais)
rm(novas_variaveis_fatoriais)
rm(nomes_novas_variaveis)
rm(colunas_numericas)
## Automl
# Inicializando o H2O (Framework de Machine Learning)
h2o.init()
# O H2O requer que os dados estejam no formato de dataframe do H2O
h2o_frame <- as.h2o(dados)
str(dados)
## Carregando dados
dados <- data.frame(read_xlsx("dataset/FEV-data-Excel.xlsx"))
dados <- dados[complete.cases(dados), ]
# - Aplica as modificações da versão 3
# - Utiliza as variáveis do Feature Selection
# - AutoML
## Engenharia de Atributos
# Convertendo a variável variáveis chr para fator
dados <- dados %>%
mutate_if(is.character, factor) %>%
mutate(across(c(Number.of.seats, Number.of.doors), as.factor))
# Normalização dos Dados (variáveis numéricas) (Exemplo 1 coluna ao final)
numeric_columns <- sapply(dados, is.numeric)
dados_nor <- dados %>%
mutate(across(where(is.numeric), ~ scale(., center = min(.), scale = max(.) - min(.))))
rm(numeric_columns)
View(dados_nor)
# Inicializando o H2O (Framework de Machine Learning)
h2o.init()
str(dados)
str(dados_nor)
# O H2O requer que os dados estejam no formato de dataframe do H2O
h2o_frame <- as.h2o(dados_nor)
# O H2O requer que os dados estejam no formato de dataframe do H2O
# Certifique-se de que dados_nor seja um data frame
dados_nor <- as.data.frame(dados_nor)
# Converta para H2O frame
h2o_frame <- as.h2o(dados_nor)
str(dados_nor)
# O H2O requer que os dados estejam no formato de dataframe do H2O
# Certifique-se de que dados_nor seja um data frame
dados_nor <- as.data.frame(dados_nor)
# Converta para H2O frame
h2o_frame <- as.h2o(dados_nor)
## Carregando dados
dados <- data.frame(read_xlsx("dataset/FEV-data-Excel.xlsx"))
dados <- dados[complete.cases(dados), ]
# - Modifica todas as variáveis chr para factor
# - Modifica as variáveis numéricas Number.of.seats e Number.of.doors em factor
# - Cria duas novas variáveis de relação
# - Aplica Normalização nas variáveis do tipo int
# - Utiliza Feature Selection
# - Cria 1 Tipo de Modelo (RandomForest)
## Engenharia de Atributos
# Convertendo a variável variáveis chr para fator
dados <- dados %>%
mutate_if(is.character, factor) %>%
mutate(across(c(Number.of.seats, Number.of.doors), as.factor))
# Normalização dos Dados (variáveis numéricas) (Exemplo 1 coluna ao final)
numeric_columns <- sapply(dados, is.numeric)
dados_nor <- dados %>%
mutate(across(where(is.numeric), ~ scale(., center = min(.), scale = max(.) - min(.))))
rm(numeric_columns)
# Reverter Normalização
# dados_revertidos <- dados_nor %>%
#   mutate(across(where(is.numeric), ~ (. * (max(dados[, cur_column()]) - min(dados[, cur_column()])) + min(dados[, cur_column()]))))
# Criando novas variáveis de relação
dados_nor$Weight.Power.Ratio <- dados$Minimal.empty.weight..kg. / dados$Engine.power..KM.  # Relação entre Peso e Potência do Motor
dados_nor$Battery.Range.Ratio <- dados$Battery.capacity..kWh. / dados$Range..WLTP...km.    # Relação entre Capacidade da Bateria e Alcance
## Seleção de Variáveis (Feature Selection)
modelo <- randomForest(mean...Energy.consumption..kWh.100.km. ~ .,
data = dados_nor,
ntree = 100, nodesize = 10, importance = T, set.seed(100))
# Visualizando por números
print(modelo$importance)
# Visualizando por Gráficos
varImpPlot(modelo)
importancia_ordenada <- modelo$importance[order(-modelo$importance[, 1]), , drop = FALSE]
df_importancia <- data.frame(
Variavel = rownames(importancia_ordenada),
Importancia = importancia_ordenada[, 1]
)
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
rm(modelo)
rm(importancia_ordenada)
rm(df_importancia)
## Criando Modelo
# Dividindo os dados em treino e teste
set.seed(150)
indices <- createDataPartition(dados_nor$mean...Energy.consumption..kWh.100.km., p = 0.80, list = FALSE)
dados_treino <- dados_nor[indices, ]
dados_teste <- dados_nor[-indices, ]
rm(indices)
# Criando o modelo preditivo (RandomForest)
modelo <- randomForest(mean...Energy.consumption..kWh.100.km. ~ Wheelbase..cm. + Battery.Range.Ratio + Make + Minimal.price..gross...PLN.
+ Maximum.speed..kph. + Permissable.gross.weight..kg. + Width..cm. + Length..cm. + Drive.type + Maximum.torque..Nm.,
data = dados_treino,
ntree = 100, nodesize = 10, importance = TRUE, set.seed(100))
# Realizando previsões no conjunto de teste
previsoes <- predict(modelo, newdata = dados_teste)
# Avaliando o desempenho do modelo
rmse <- sqrt(mean((previsoes - dados_teste$mean...Energy.consumption..kWh.100.km.)^2))
cat("RMSE (Root Mean Squared Error):", rmse, "\n")
mae <- mean(abs(previsoes - dados_teste$mean...Energy.consumption..kWh.100.km.))
cat("MAE (Mean Absolute Error):", mae, "\n")
rsquared <- 1 - sum((previsoes - dados_teste$mean...Energy.consumption..kWh.100.km.)^2) / sum((dados_teste$mean...Energy.consumption..kWh.100.km. - mean(dados_teste$mean...Energy.consumption..kWh.100.km.))^2)
cat("R-squared:", rsquared, "\n")
# Modelo 1
# RMSE (Root Mean Squared Error): 0.04279581
# MAE (Mean Absolute Error)     : 0.04041983
# R-squared                     : 0.973763
rm(modelo)
rm(previsoes)
rm(rmse)
rm(mae)
rm(rsquared)
ava_modelo1
## Desliga o H2O
h2o.shutdown()
